center = c(34, 38), radius = 700,
region = anatolia
)
yam <- population(
name = "YAM", time = 7000, world,
coords = list(   # polygon specified using coordinates of vertices
c(26, 50), c(38, 49), c(48, 50),
c(48, 56), c(38, 59), c(26, 56)
)
neol <- population(
name= "NEOL", time = 7000, world,
center = c(10, 48), radius = 800
)
ana <- ana %>%
expand(
by = 2500,
duration = 5000,
snapshots = 10,
region = europe_anatolia
)
ana
plot(ana, title = "Anatolian expansion into Europe")
plot(ana, title = "Anatolian expansion into Europe (not rendered)", rendering = F)
yam <- yam %>%
migrate(
towards = c(10, 48), # migrate towards this point
duration = 1000,     # how many years does the migration take?
snapshots = 8        # how many intermediate maps should be saved?
)
yam
plot(yam, title = "Intermediate migration maps")
plot(whg, neol, yam, ana)
debugSource('~/projects/spammr/R/spatial.R', echo=TRUE)
x = rasterize(ana, whg)
pops
pop = pops[[1]]
pop
unique(pop$time)
t = 9000
snapshot <- pop[pop$time == t, ]
snapshot
attr(pop, "rendered")
snapshot <- render(snapshot)
snapshot
plot(snapshot)
# convert from vectorized representation to a raster and back to
# a sf object with all the annotations
ras <- stars::st_rasterize(snapshot)
ras_sf <- sf::st_as_sf(ras)
ras_sf$pop <- pop$pop[1]
ras_sf$time <- pop$time[1]
bbox <- sf::st_bbox(attr(pop, "world"))
ggplot() +
geom_sf(data = ras_sf, color = "white") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
cowplot::theme_nothing() +
theme(plot.background = element_rect(fill = "black"))
debugSource('~/projects/spammr/R/spatial.R', echo=TRUE)
x = rasterize(ana, whg)
length(snapshots)
snapshots[[1]]
snapshots[[2]]
debugSource('~/projects/spammr/R/spatial.R', echo=TRUE)
x = rasterize(ana, whg)
plot(snapshot)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 7,
fig.height = 5,
dpi = 100
)
#library(spammr)
devtools::load_all("~/projects/spammr")
world <- world_map(
lon = c(-15, 60),  # min-max longitude
lat = c(20, 65),   # min-max latitude
crs = "EPSG:3035"  # real projected CRS used internally
)
world
plot(world, title = "Zoomed-in world map context")
europe_anatolia <- region(
"Western Europe & Anatolia",
world,
coords = list(
c(-10, 35), c(-5, 35), c(10, 38), c(20, 35), c(38, 35),
c(40, 40), c(30, 45), c(20, 58), c(-5, 60), c(-15, 50)
)
europe <- region(
"Western Europe",
world,
coords = list(
c(-8, 35), c(-5, 36), c(10, 38), c(20, 35), c(25, 35),
c(28, 45), c(20, 58), c(-5, 60), c(-15, 50)
)
anatolia <- region(
"Anatolia",
world,
coords = list(
c(28, 35), c(40, 35),
c(42, 40), c(30, 43), c(27, 40), c(25, 38)
)
anatolia
class(anatolia)
plot(europe, anatolia, title = "Geographic regions")
all(attr(europe, "world") == world)
all(attr(anatolia, "world") == world)
whg <- population(
name = "WHG",       # population identifier
time = 25000,       # time in years ago
world,              # world map 'context' for the population
center = c(-1, 47), # (longitude, latitude)
radius = 1300       # radius of a circle in km
)
plot(whg, rendering = F, title = "'Raw' population range")
plot(whg, title = "'Rendered' population range")
whg <- population(
name = "WHG",   # population identifier
time = 25000,   # time in years ago
world,          # world map 'context' for the population
region = europe # geographic region object
)
plot(whg, rendering = F, title = "'Raw' population range")
plot(whg, title = "'Rendered' population range")
ana <- population(
name = "ANA", time = 9000, world,
center = c(34, 38), radius = 700,
region = anatolia
)
yam <- population(
name = "YAM", time = 7000, world,
coords = list(   # polygon specified using coordinates of vertices
c(26, 50), c(38, 49), c(48, 50),
c(48, 56), c(38, 59), c(26, 56)
)
neol <- population(
name= "NEOL", time = 7000, world,
center = c(10, 48), radius = 800
)
ana <- ana %>%
expand(
by = 2500,
duration = 5000,
snapshots = 10,
region = europe_anatolia
)
ana
plot(ana, title = "Anatolian expansion into Europe")
plot(ana, title = "Anatolian expansion into Europe (not rendered)", rendering = F)
yam <- yam %>%
migrate(
towards = c(10, 48), # migrate towards this point
duration = 1000,     # how many years does the migration take?
snapshots = 8        # how many intermediate maps should be saved?
)
yam
plot(yam, title = "Intermediate migration maps")
plot(whg, neol, yam, ana)
x = rasterize(ana, whg)
length(x)
x[[2]]
x[[2]][[1]]
x[[1]][[1]]
pops <- list(ana, whg)
pops[[1]]
t = 9000
pops <- list(ana, whg)
pop = pops[[1]]
pop$time
t = pop$time[4]
t
snapshot <- pop[pop$time == t, ]
snapshot
plot(snapshot)
snapshot
class(snapshot) <- set_class(snapshot, "pop")
plot(snapshot)
attr(snapshot, "world")
plot(snapshot)
rendering = T
snapshot <- render(snapshot)
plot(snapshot)
snapshot
# convert from vectorized representation to a raster and back to
# a sf object with all the annotations
ras <- stars::st_rasterize(snapshot)
ras_sf <- sf::st_as_sf(ras)
ras_sf$pop <- pop$pop[1]
ras_sf$time <- pop$time[1]
plot(ras_sf)
unique(pop$time)
times <- pop$pop
pop$pop
paste(pop$pop, times, sep = "_")
times <- unique(pop$time)
paste(pop$pop, times, sep = "_")
times <- unique(pop$time)
snapshot <- pop[pop$time == t, ]
class(snapshot) <- set_class(snapshot, "pop")
# render the population if needed
if (is.null(attr(pop, "rendered")) & rendering)
snapshot <- render(snapshot)
attr(snapshot, "rendered")
# convert from vectorized representation to a raster and back to
# a sf object with all the annotations
ras <- stars::st_rasterize(snapshot)
ras_sf <- sf::st_as_sf(ras)
ras_sf$pop <- pop$pop[1]
ras_sf$time <- pop$time[1]
bbox <- sf::st_bbox(attr(pop, "world"))
ggplot() +
geom_sf(data = ras_sf, color = "white") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
cowplot::theme_nothing() +
theme(plot.background = element_rect(fill = "black"))
pops
pop = pops[[1]]
times <- unique(pop$time)
snapshots <- lapply(times, function(t) {
snapshot <- pop[pop$time == t, ]
class(snapshot) <- set_class(snapshot, "pop")
# render the population if needed
if (is.null(attr(pop, "rendered")) & rendering)
snapshot <- render(snapshot)
# convert from vectorized representation to a raster and back to
# a sf object with all the annotations
ras <- stars::st_rasterize(snapshot)
ras_sf <- sf::st_as_sf(ras)
ras_sf$pop <- pop$pop[1]
ras_sf$time <- pop$time[1]
bbox <- sf::st_bbox(attr(pop, "world"))
ggplot() +
geom_sf(data = ras_sf, color = "white") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
cowplot::theme_nothing() +
theme(plot.background = element_rect(fill = "black"))
})
names(snapshots) <- paste(pop$pop, times, sep = "_")
names(snapshots)
snapshots[[1]]
snapshots[[3]]
snapshots[[2]]
snapshots[[1]]
t = 9000
snapshot <- pop[pop$time == t, ]
snapshot
plot(snapshot)
class(snapshot) <- set_class(snapshot, "pop")
plot(snapshot)
# render the population if needed
if (is.null(attr(pop, "rendered")) & rendering)
snapshot <- render(snapshot)
plot(snapshot)
attr(snapshot, "rendered")
# convert from vectorized representation to a raster and back to
# a sf object with all the annotations
ras <- stars::st_rasterize(snapshot)
plot(ras)
ras_sf <- sf::st_as_sf(ras)
plot(ras)
ras_sf$pop
pop$pop[1]
pop$time[1]
snapshot
# convert from vectorized representation to a raster and back to
# a sf object with all the annotations
ras <- stars::st_rasterize(snapshot)
ras_sf <- sf::st_as_sf(ras)
ras_sf$pop <- snapshot$pop[1]
ras_sf$time <- snapshot$time[1]
plot(ras_sf)
attr(snapshot, "world")
bbox <- sf::st_bbox(attr(snapshot, "world"))
attr(snapshot, "world")plot(bbox)
plot(bbox)
ggplot() +
geom_sf(data = ras_sf, color = "white") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
cowplot::theme_nothing() +
theme(plot.background = element_rect(fill = "black"))
ggplot() +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
cowplot::theme_nothing() +
theme(plot.background = element_rect(fill = "black")) +
geom_sf(data = ras_sf, color = "white")
plot(ras)
ras_sf <- sf::st_as_sf(ras)
plot(ras_sf)
ras_sf$pop <- snapshot$pop[1]
ras_sf
# convert from vectorized representation to a raster and back to
# a sf object with all the annotations
ras <- stars::st_rasterize(snapshot)
ras
ras_sf <- sf::st_as_sf(ras)
ras
ras_sf
snapshot$time[1]
ras_sf$pop <- snapshot$pop[1]
ras_sf$time <- snapshot$time[1]
ras_sf
plot(ras_sf)
ggplot() +
geom_sf(data = ras_sf, color = "white") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE)
ggplot() +
geom_sf(data = ras_sf, color = "red") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE)
ggplot() +
geom_sf(data = ras_sf, color = "red") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) + cowplot::theme_nothing()
ggplot() +
geom_sf(data = ras_sf, color = "red") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) + cowplot::theme_nothing()
ggplot() +
geom_sf(data = ras_sf, color = "red") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE)
ggplot() +
geom_sf(data = ras_sf, color = "red") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) + theme(plot.background = element_rect(fill = "black"))
ggplot() +
geom_sf(data = ras_sf, color = "red") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) + theme(plot.background = element_rect(fill = "black")) + theme_void()
ggplot() +
geom_sf(data = ras_sf, color = "red") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) + theme_void()
ggplot() +
geom_sf(data = ras_sf, color = "red") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE)
bbox <- sf::st_bbox(attr(snapshot, "world"))
ggplot() +
geom_sf(data = ras_sf, color = "red") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
theme(plot.background = element_rect(fill = "black"))
bbox <- sf::st_bbox(attr(snapshot, "world"))
ggplot() +
geom_sf(data = ras_sf, color = "red") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
theme(plot.background = element_rect(fill = "black")) + theme_void()
bbox <- sf::st_bbox(attr(snapshot, "world"))
ggplot() +
geom_sf(data = ras_sf, color = "red") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
theme_void() + theme(plot.background = element_rect(fill = "black"))
bbox <- sf::st_bbox(attr(snapshot, "world"))
ggplot() +
geom_sf(data = snapshot, color = "red") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
theme_void() + theme(plot.background = element_rect(fill = "black"))
bbox <- sf::st_bbox(attr(snapshot, "world"))
ggplot() +
geom_sf(data = snapshot, fill = "white") +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
theme_void() + theme(plot.background = element_rect(fill = "black"))
bbox <- sf::st_bbox(attr(snapshot, "world"))
ggplot() +
geom_sf(data = snapshot, fill = "white", color = NA) +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
theme_void() + theme(plot.background = element_rect(fill = "black"))
bbox <- sf::st_bbox(attr(snapshot, "world"))
ggplot() +
geom_sf(data = snapshot, fill = "white", color = NA) +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
theme_void() +
theme(plot.background = element_rect(fill = "black"))
bbox <- sf::st_bbox(attr(snapshot, "world"))
ggplot() +
geom_sf(data = ras_sf, fill = "white", color = NA) +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
theme_void() +
theme(plot.background = element_rect(fill = "black"))
bbox <- sf::st_bbox(attr(snapshot, "world"))
ggplot() +
geom_sf(data = snapshot, fill = "white", color = NA) +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
theme_void() +
theme(plot.background = element_rect(fill = "black"))
t = 4000
snapshot <- pop[pop$time == t, ]
class(snapshot) <- set_class(snapshot, "pop")
# render the population if needed
if (is.null(attr(pop, "rendered")) & rendering)
snapshot <- render(snapshot)
plot(snapshot)
bbox <- sf::st_bbox(attr(snapshot, "world"))
ggplot() +
geom_sf(data = snapshot, fill = "white", color = NA) +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
theme_void() +
theme(plot.background = element_rect(fill = "black"))
times <- unique(pop$time)
snapshots <- lapply(times, function(t) {
snapshot <- pop[pop$time == t, ]
class(snapshot) <- set_class(snapshot, "pop")
# render the population if needed
if (is.null(attr(pop, "rendered")) & rendering)
snapshot <- render(snapshot)
bbox <- sf::st_bbox(attr(snapshot, "world"))
ggplot() +
geom_sf(data = snapshot, fill = "white", color = NA) +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
theme_void() +
theme(plot.background = element_rect(fill = "black"))
})
names(snapshots) <- paste(pop$pop, times, sep = "_")
snapshots[[1]]
snapshots[[2]]
snapshots[[3]]
snapshots[[4]]
pops
rasters <- lapply(pops, function(pop) {
times <- unique(pop$time)
snapshots <- lapply(times, function(t) {
snapshot <- pop[pop$time == t, ]
class(snapshot) <- set_class(snapshot, "pop")
# render the population if needed
if (is.null(attr(pop, "rendered")) & rendering)
snapshot <- render(snapshot)
bbox <- sf::st_bbox(attr(snapshot, "world"))
ggplot() +
geom_sf(data = snapshot, fill = "white", color = NA) +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
theme_void() +
theme(plot.background = element_rect(fill = "black"))
})
names(snapshots) <- paste(pop$pop, times, sep = "_")
snapshots
})
length(rasters)
rasters[[2]][[1]]
rasters[[1]][[6]]
length(unlist(rasters))
rasters[[2]][[1]]
raster_list <- lapply(pops, function(pop) {
times <- unique(pop$time)
snapshots <- lapply(times, function(t) {
snapshot <- pop[pop$time == t, ]
class(snapshot) <- set_class(snapshot, "pop")
# render the population if needed
if (is.null(attr(pop, "rendered")) & rendering)
snapshot <- render(snapshot)
bbox <- sf::st_bbox(attr(snapshot, "world"))
ggplot() +
geom_sf(data = snapshot, fill = "white", color = NA) +
coord_sf(xlim = bbox[c(1, 3)], ylim = bbox[c(2, 4)], expand = FALSE) +
theme_void() +
theme(plot.background = element_rect(fill = "black"))
})
names(snapshots) <- paste(pop$pop, times, sep = "_")
snapshots
})
names(rasters)
names(raster_list[[2]])
names(raster_list[[1]])
pop = raster_list[[1]]
pop
names(pop)
snapshots = raster_list[[1]]
names(snapshots)
unlist(raster_list)
length(unlist(raster_list))
c(raster_list)
do.call(raster_list, c)
do.call(c, raster_list)
# flatten the list of ggplot objects
rasters <- do.call(c, raster_list)
names(rasters)
devtools::load_all(".")
x = rasterize(ana, whg)
names(x)
x[[1]]
x[[2]]
devtools::load_all(".")
x = rasterize(ana, whg)
names(x)
getwd()
tmpdir("model")
tempdir()
output_dir <- tempdir()
dir(output_dir)
output_dir <- dir.create(tempdir(), "model_output")
output_dir
dir(output_dir)
output_dir <- dir.create(file.path(tempdir(), "model_output"))
output_dir
output_dir <- file.path(tempdir(), "model_output")
output_dir
dir(output_dir)
rasterize(whg, ana, neol, yam, outdir = output_dir)
output_dir <- "~/projects/spammr/vignettes/model"
rasterize(whg, ana, neol, yam, outdir = output_dir)
raster_ana <- rasterize(ana)
names(raster_ana)
raster_ana[["ANA_5500"]]
output_dir <- "~/projects/spammr/vignettes/model"
rasterize(
whg, ana, neol, yam,
outdir = "~/projects/spammr/vignettes/model"
)
list.files("~/projects/spammr/vignettes/model")
unlink("~/projects/spammr/vignettes/model", force = FALSE)
unlink("~/projects/spammr/vignettes/model", recursive = TRUE, force = FALSE)
pkgdown::build_site()
gs
pkgdown::build_site()
plot(ana, "Anatolian farmer population")
ana
plot(ana)
pkgdown::build_site()
str(rasters)
patchwork::wrap_plots(raster_ana)
pkgdown::build_site()
