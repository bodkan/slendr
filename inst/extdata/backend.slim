initialize() {
  defineConstant("SIM_SEED", {{seed}});
  setSeed(SIM_SEED);

  // optional behavior switches set by the R frontend
  defineConstant("KEEP_PEDIGREES", {{keep_pedigrees}});
  defineConstant("TS_RECORDING", {{ts_recording}});
  defineConstant("SAVE_LOCATIONS", {{save_locations}});
  defineConstant("TRACK_ANCESTRY", {{track_ancestry}});

  defineConstant("N_MARKERS", {{ancestry_markers}});
  defineConstant("OUTPUT_PREFIX", "{{output_prefix}}");

  defineConstant("BURNIN_LENGTH", {{burnin}});
  defineConstant("SIM_LENGTH", {{length}});

  defineConstant("SIM_START", BURNIN_LENGTH + 1);
  defineConstant("SIM_END", SIM_START + SIM_LENGTH);

  // load model definition tables
  defineConstant("POPULATIONS", read_table(model_path("populations.tsv")));
  defineConstant("GENEFLOWS", read_table(model_path("geneflow.tsv")));
  defineConstant("SIZE_CHANGES", read_table(model_path("resizes.tsv")));
  defineConstant("MAPS", read_table(model_path("maps.tsv")));
  // load all spatial maps (image objects)
  MAPS.setValue("image", sapply(MAPS.getValue("path"), "Image(applyValue);"));

  // convert times from generations (starting at 1) to absolute SLiM times
  // (shifted by the burnin length)
  slim_time(POPULATIONS);
  slim_time(GENEFLOWS);
  slim_time(MAPS);
  slim_time(SIZE_CHANGES);

  // world map dimensions
  defineConstant("WIDTH", MAPS.getValue("image")[0].width); catn("WIDTH: " + WIDTH);
  defineConstant("HEIGHT", MAPS.getValue("image")[0].height); catn("HEIGHT: " + HEIGHT);

  initializeSLiMOptions(keepPedigrees = KEEP_PEDIGREES, dimensionality = "xy");
  if (TS_RECORDING) initializeTreeSeq();

  // mutation types of neutral ancestry-informative markers (one for each population)
  mut_types = POPULATIONS.getValue("pop_id");
  for (i in mut_types)
    initializeMutationType(i, 0.5, "f", 0.0);

  initializeGenomicElementType("g1", mut_types, rep(1.0, length(mut_types)));

  // all ancestry markers have to be prevented from stacking and from
  // disappearing once they become fixed in a population
  g1.mutationTypes[mut_types].convertToSubstitution = F;
  g1.mutationTypes[mut_types].mutationStackPolicy = "l";
  g1.mutationTypes[mut_types].mutationStackGroup = 0;

  defineConstant("SEQ_LENGTH", asInteger({{seq_length}}));
  initializeGenomicElement(g1, 0, SEQ_LENGTH - 1);

  initializeRecombinationRate({{recomb_rate}});
  initializeMutationRate(0.0);

  // generate interaction types (two for each population)
  for (i in POPULATIONS.getValue("pop_id")) {
    max_distance = filter(POPULATIONS, "pop_id", i).getValue("competition_dist");
    mate_distance = filter(POPULATIONS, "pop_id", i).getValue("mate_dist");

    initializeInteractionType(2 * i, "xy", reciprocal = T, maxDistance = max_distance);
    initializeInteractionType(2 * i + 1, "xy", reciprocal = T, maxDistance = mate_distance);
  }
}

1 early() {
  // creating ancestral populations (i.e. those without parents)
  pops = filter(POPULATIONS, "parent", "ancestor");
  for (i in iter(pops)) {
    id = pops.getRowValues(i).getValue("pop_id");
    N = pops.getRowValues(i).getValue("N");
    sim.addSubpop(id, N);
    set_map(id, sim.generation);
    set_coordinates(get_pop(id).individuals, id);
    add_markers(id);
  }
  evaluate_interactions();

  // end of burnin script block
  sim.rescheduleScriptBlock(s0, generations = SIM_START);

  // schedule population size changes
  if (!isNULL(SIZE_CHANGES))
    sim.rescheduleScriptBlock(s10, generations = unique(SIZE_CHANGES.getValue("time")));
  else
    sim.deregisterScriptBlock(s10);

  // schedule population splits (if any)
  split_times = filter(POPULATIONS, "parent", "ancestor", negate = T).getValue("tsplit");
  if (length(split_times))
    sim.rescheduleScriptBlock(s1, generations = unique(split_times));
  else
    sim.deregisterScriptBlock(s1);

  // geneflow events
  if (!isNULL(GENEFLOWS)) {
    sim.rescheduleScriptBlock(s2, generations = unique(GENEFLOWS.getValue("tstart")));
    sim.rescheduleScriptBlock(s3, generations = unique(GENEFLOWS.getValue("tend")));
  } else {
    sim.deregisterScriptBlock(s2);
    sim.deregisterScriptBlock(s3);
  }

  // removing populations which are no longer required
  removal_times = filter(POPULATIONS, "tremove", -1, negate = T).getValue("tremove");
  if (length(removal_times))
     sim.rescheduleScriptBlock(s4, generations = unique(removal_times));
  else
     sim.deregisterScriptBlock(s4);

  // spatial map changes
  if (any(MAPS.getValue("time") > 1))
     sim.rescheduleScriptBlock(s5, generations = unique(MAPS.getValue("time")));
  else
     sim.deregisterScriptBlock(s5);

  // output locations of individuals
  if (SAVE_LOCATIONS) {
    sim.rescheduleScriptBlock(s6, start = SIM_START, end = SIM_END);
    write_locations_header();
  } else
    sim.deregisterScriptBlock(s6);

  // output tree sequence data
  if (TS_RECORDING) {
    sim.rescheduleScriptBlock(s7, generations = SIM_END);
  } else
    sim.deregisterScriptBlock(s7);

  // output ancestry proportions
  if (TRACK_ANCESTRY) {
     sim.rescheduleScriptBlock(s8, generations = SIM_START:SIM_END);
     write_ancestries_header();
  } else
     sim.deregisterScriptBlock(s8);

  // stop the simulation
  sim.rescheduleScriptBlock(s9, generations = SIM_END);
}

//////////////////////////////////////////////////////////////////////
// Demography script blocks
//////////////////////////////////////////////////////////////////////

s0 late() {
  log_output("burnin ends");
}

// Population splits
s1 late() {
  // get the populations splitting in the current generation
  pops = filter(POPULATIONS, "tsplit", sim.generation);
  for (i in iter(pops)) {
    id = pops.getRowValues(i).getValue("pop_id");
    split_pop(id);
    set_map(id, sim.generation);
    set_coordinates(get_pop(id).individuals, id);
    add_markers(id);
    evaluate_interactions();
  }
}

// Geneflow events
s2 late() {
  // iterate over all geneflow events scheduled for this generation
  // and set them accordingly
  events = filter(GENEFLOWS, "tsplit", sim.generation);
  for (i in events.getValue("row")) {
    event = events.getRowValues(i);
    from = event.getValue("from"); to = event.getValue("to");
    from_id = event.getValue("from_id"); to_id = event.getValue("to_id");
    rate = event.getValue("rate");
    span = event.getValue("tend") - event.getValue("tstart");

    get_pop(to_id).setMigrationRates(from_id, rate / span);

    log_output("geneflow " + from + "(" + from_id + ")" +
               " -> " + to + "(" + to_id + ")" +
               " (" + rate + "% over " + span + " generations)");
  }
}

// Stopping geneflow
s3 late() {
  // iterate over all geneflow events scheduled for this generation
  // and set them accordingly
  events = filter(GENEFLOWS, "tsplit", sim.generation);
  for (i in events.getValue("row")) {
    event = events.getRowValues(i);
    from = event.getValue("from"); to = event.getValue("to");
    from_id = event.getValue("from_id"); to_id = event.getValue("to_id");
    rate = event.getValue("rate");
    span = event.getValue("tend") - event.getValue("tstart");

    get_pop(to_id).setMigrationRates(from_id, rate / span);

    log_output("geneflow " + from + "(" + from_id + ")" +
               " -> " + to + "(" + to_id + ")" + " set to 0%");
  }
}

// Remove populations which are no longer necessary
s4 late() {
  pops = filter(POPULATIONS, "tremove", sim.generation);
  for (i in iter(pops)) {
    pop = pops.getRowValues(i);
    log_output("cleanup of " + pop.getValue("pop") + "(" + pop.getValue("pop_id") + ")");
    get_pop(pop.getValue("pop")).setSubpopulationSize(0);
  }
}

// Update population spatial maps
s5 late() {
  // get populations whose spatial maps should be updated
  maps = filter(MAPS, "time", sim.generation);
  for (i in iter(maps)) {
    map = maps.getRowValues(i);
    log_output("updating map for " + map.getValue("pop") + "(" + map.getValue("pop_id") + ")");
    set_map(map.getValue("pop_id"), sim.generation);
  }
}

//////////////////////////////////////////////////////////////////////
// Output script blocks
//////////////////////////////////////////////////////////////////////

// Save locations and remember ancient individuals
s6 late() {
  // explicitly sample individuals for later tree sequence analysis
  // (one individual from each population)
  // TODO: make this programmable by the user on the R side
  if (sim.generation % 10 == 0) {
    inds = sapply(sim.subpopulations, "sample(applyValue.individuals, 1);");
    if (length(inds)) inds.setValue("sampled", 1);
    if (TS_RECORDING) sim.treeSeqRememberIndividuals(inds);
  }
  // save location of each individual present
  for (ind in sim.subpopulations.individuals) {
    write_locations(ind);
  }
}

// Save tree sequences at the end of the simulation
s7 late() {
  catn("--------------------------------------------------");
  log_output("saving tree-sequence data");

  if (TS_RECORDING) {
     filename = paste0(OUTPUT_PREFIX, "_tree_seq.trees");
     sim.treeSeqOutput(filename);
  }
}

s8 late() {
  write_ancestries();
}

s9 late() {
  catn("--------------------------------------------------");
  log_output("simulation finished");
  sim.simulationFinished();
}

s10 late() {
  events = filter(SIZE_CHANGES, "time", sim.generation);
  for (e in events) {
    pop = e.getValue("pop"); N = e.getValue("N");
    get_pop(pop).setSubpopulationSize(N);
    log_output(pop + "(" + e.getValue("pop_id") + ") resized to " + N + " individuals");
  }
}


//////////////////////////////////////////////////////////////////////
// Callbacks and interaction evaluations
//////////////////////////////////////////////////////////////////////

1: late() {
  evaluate_interactions();
}

2: fitness(NULL) {
  interaction = sim.interactionTypes[subpop.id];
  totalStrength = interaction.totalOfNeighborStrengths(individual);
  return 1.1 - totalStrength / subpop.individualCount;
}

2: mateChoice() {
  return sim.interactionTypes[subpop.id].strength(individual);
}

modifyChild() {
  // assign locations uniformly in spatially non-overlapping geneflow
  if (child.migrant) {
    // get indices of the currently active geneflow events
    active = GENEFLOWS.getValue("tstart") <= sim.generation &
             sim.generation <= GENEFLOWS.getValue("tend");

    // get population of the offspring's parents (i.e. the source of geneflow)
    source = sourceSubpop.id == GENEFLOWS.getValue("from_id");

    // get the offspring's new population(i.e. the target of geneflow)
    target = subpop.id == GENEFLOWS.getValue("to_id");

    // if the current admixture event is non-overlapping, set the
    // childs coordinates freely
    overlap = GENEFLOWS.getValue("overlap")[active & target & source];
    if (!overlap) {
      set_coordinates(child, subpop.id, log = F);
      return T;
    }
  }

  // for spatially overlapping geneflow and non-migrant offspring,
  // propose location in the neighborhood of one of its parents
  jitter = rnorm(2, 0, filter(POPULATIONS, "pop_id", subpop.id).getValue("offspring_dist"));
  pos = parent1.spatialPosition + jitter;

  // make sure that offspring is generated in allowed locations on the map
  // (within it's population bounds and not in an inaccessible location)
  if (!subpop.pointInBounds(pos) | subpop.spatialMapValue("world", pos) == 1.0) {
    return F;
  } else {
    child.setSpatialPosition(pos);
    return T;
  }
}

//////////////////////////////////////////////////////////////////////
// Input/output utility functions
//////////////////////////////////////////////////////////////////////

function (s$) model_path(s$ file) {
  return paste0("{{model_dir}}", "/", file);
}

// Write a header of a locations table to a locations file
function (void) write_locations_header(void) {
  filename = paste0(OUTPUT_PREFIX, "_ind_locations.tsv.gz");
  header_str = "t\tpop\tind\tx\ty\tsampled";
  writeFile(filename, header_str, compress = T);
}

// Write information about a given individual to a locations file
function(void) write_locations(lifso<Individual>$ ind) {
  filename = paste0(OUTPUT_PREFIX, "_ind_locations.tsv.gz");
  if (KEEP_PEDIGREES) id = ind.pedigreeID;
  else id = -1;
  ind_str = paste(
    SIM_END - sim.generation,
    ind.subpopulation.id,
    id,
    ind.spatialPosition,
    asInteger(!isNULL(ind.getValue("sampled"))),
    sep = "\t"
  );
  writeFile(filename, ind_str, append = T, compress = T);
}

// Write the headers of ancestry tables
function (void) write_ancestries_header(void) {
  for (pop in pop_param("pop")) {
    header_str = paste(c("gen", NAMES[pop_param("pop")]), sep = "\t");
    filename = paste0(OUTPUT_PREFIX, "_ancestry_", NAMES[pop], ".tsv");
    writeFile(filename, header_str);
  }
}

// Write information about a given individual to a locations file
function (void) write_ancestries(void) {
  for (pop in sim.subpopulations) {
    line = paste(SIM_END - sim.generation, calc_ancestry(pop), sep = "\t");
    filename = paste0(OUTPUT_PREFIX, "_ancestry_", NAMES[pop.id], ".tsv");
    writeFile(filename, line, append = T);
  }
}

// Calculate a vector of ancestry proportions in a given population
function (float) calc_ancestry(lifso<Subpopulation>$ pop) {
  // mutation IDs of all populations' ancestry markers
  mut_ids = pop_param("pop");
  return sapply(mut_ids, "mean(pop.genomes.countOfMutationsOfType(applyValue) / N_MARKERS);");
}

// Write the given output string with the time stamp
function (void) log_output(s$ str) {
  catn("Generation " + sim.generation + ": " + str);
}

//////////////////////////////////////////////////////////////////////
// Simulation utility functions
//////////////////////////////////////////////////////////////////////

function (void) evaluate_interactions(void) {
  sim.interactionTypes.evaluate();
}

// Assign a spatial map to a given population
function (void) set_map(i$ id, i$ generation) {
  map = filter(filter(MAPS, "pop_id", id), "time", generation);
  img = map.getValue("image");
  pop = get_pop(map.getValue("pop"));
  pop.defineSpatialMap("world", "xy", 1.0 - img.floatK,
    valueRange=c(min(img.floatK), max(img.floatK)), colors=c("#000000", "#FFFFFF"));
  pop.setSpatialBounds(c(0.0, 0.0, asFloat(WIDTH) - 1, asFloat(HEIGHT) - 1));
}

// Split population from the source specified in an input table
function (void) split_pop(i$ id) {
  pop = filter(POPULATIONS, "pop_id", id);
  log_output("split of " + pop.getValue("pop") + "(" + pop.getValue("pop_id") + ")" +
             " from " + pop.getValue("parent") + "(" + pop.getValue("parent_id")  + ")");
  sim.addSubpopSplit(pop.getValue("pop_id"), pop.getValue("N"), pop.getValue("parent_id"));
}

// Set the migration rate from a populaion 'from' to a population 'to'
// (also used for resetting the migration back to zero)
// function (void) set_geneflow() {}

// Add ancestry informative markers specific to the given population
function (void) add_markers(i$ id) {
  if (TRACK_ANCESTRY) {
    log_output("adding " + filter(POPULATIONS, "pop_id", id).getValue("pop") +
               "(" + id + ")" + " ancestry markers");
    get_pop(pop).genomes.addNewMutation(pop, 0.0, seq(0, 1 - 1, by = asInteger(1 / N_MARKERS)));
  }
}

// Distribute individuals uniformly within the boundary of the given population
function (void) set_coordinates(lifso<Individual> inds, i$ pop, [l$ log = T]) {
  if (log) log_output("distributing individuals");
  for (ind in inds) {
    do pos = c(runif(1, 0, WIDTH), runif(1, 0, HEIGHT));
    while (get_pop(pop).spatialMapValue("world", pos) == 1.0);
    ind.setSpatialPosition(pos);
  }
}

// Get subpopulation object based on a given identifier
// (SLiM-based numerber or a user-defined string name)
function (lifso<Subpopulation>$) get_pop(si$ i) {
  if (isString(i)) i = filter(POPULATIONS, "pop", i).getValue("pop_id");
  if (!any(i == sim.subpopulations.id))
    stop("Population " + filter(POPULATIONS, "pop_id", i).getValue("pop") +
         " not present in the simulation in generation " + sim.generation);
  return sim.subpopulations[i == sim.subpopulations.id];
}

// Data frame implementation based on Dictionary
// Read a TSV file as a Dictionary of pairs of the form:
//   <column name>-<vector of column values>
function (object<Dictionary>) read_table(s$ path) {
	lines = readFile(path);

	// extract column names
	columns = strsplit(lines[0], "\t");
	// parse the body of the table into individual elements
	body = lines[1 : (length(lines) - 1)];
	body_elements = sapply(body, "strsplit(applyValue, '\t');");

	// generate a dictionary of key-vector (pairs column-column values)
	dict = Dictionary();
	for (i in seqAlong(columns)) {
		// extract values of the i-th column
		indices = seq(i, length(body_elements) - 1, by = length(columns));
		column_values = convert_type(columns[i], body_elements[indices]);

		dict.setValue(columns[i], column_values);
	}

	return dict;
}

function (i$) num_rows(object<Dictionary> d) {
  columns = d.allKeys;
  lengths = sapply(columns, 'length(d.getValue(applyValue));');
  if (length(unique(lengths)) != 1)
    stop("Corrupted dataframe {" + paste(d.allKeys, sep = ", ") +
         "} with columns of unequal length (" +
         paste(lengths, sep = ", ") + ")");
  else
    return(unique(lengths));
}

function (i) iter(object<Dictionary> d) {
  return seqAlong(num_rows(d));
}

// Filter Dictionary/data-frame for rows where the <column> is
// equal to <value>
function (object<Dictionary>) filter(object<Dictionary> d, s$ col, ifsl$ val,
                                     [l$ negate = F]) {
  if (!any(col == d.allKeys))
    stop("Column '" + col + "' not present in the table");

	values = d.getValue(col);
	if (negate)
  	return d.getRowValues(values != val);
  else
  	return d.getRowValues(values == val);
}


function (void) print_table(object<Dictionary> d) {
  columns = d.allKeys;
  catn(paste(columns, sep = "\t"));
  for (i in iter(d)) {
    row = d.getRowValues(i);
    for (c in columns)
      cat(row.getValue(c) + "\t");
    cat("\n");
  }
}


// Convert column vector values to a required type (this is hardcoded
// for every column among all slendr-generated TSV files)
function (ifsl) convert_type(s$ column_name, s string_values) {
  // vectors of all possible column names in tables defined by slendr `compile()`
	string = c("pop", "parent", "resize_how", "path", "from", "to", "how");
	integer = c("pop_id", "parent_id", "from_id", "to_id", "N",
	            "time_orig", "time_gen", "tsplit_orig", "tsplit_gen",
	            "tremove_orig", "tremove_gen", "tstart_orig", "tstart_gen",
	            "tend_orig", "tend_gen");
	float = c("rate", "competition_dist", "mate_dist", "offspring_dist");
	logical = c("overlap");

	if (any(column_name == integer))
		values = asInteger(string_values);
	else if (any(column_name == float))
		values = asFloat(string_values);
	else if (any(column_name == logical))
		values = asLogical(string_values);
	else if (any(column_name == string))
		values = asString(string_values);
	else
	  stop("Unknown column '" + column_name + "' in a dataframe");

	return values;
}

// Convert times in given tables into absolute SLiM times by adding
// the burnin length to each time point
function (void) slim_time(object<Dictionary>$ table) {
  // list of all possible time columns to look for
  time_columns = c("time", "tsplit", "tremove", "tstart", "tend");

  // get time columns present in the current table
  columns = setIntersection(table.allKeys, time_columns + "_gen");
  // for each time column, create a new column (without the "_gen" suffix)
  for (col in columns) {
    // shift the time by the burnin length
    new_times = table.getValue(col);
    new_times[new_times != -1] = BURNIN_LENGTH + new_times[new_times != -1];

    // add the new shifted time column to the table
    new_col = strsplit(col, "_gen")[0]; // remove the "_gen" suffix
    table.setValue(new_col, new_times);
  }
}
