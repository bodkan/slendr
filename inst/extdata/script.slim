///
/// Initialization block
///
initialize() {
    // if the script is being run in SLiMgui, specify dummy values for
    // total sequence length and recombination rate
    if (exists("slimgui")) {
        defineConstant("SEQUENCE_LENGTH", 1);
        defineConstant("RECOMB_RATE", 0);
    } else {
        required_arg("SEQUENCE_LENGTH");
        required_arg("RECOMB_RATE");
    }

    optional_arg("SEED", getSeed());
    setSeed(SEED); catn("SEED: " + SEED);

    optional_arg("MODEL", "."); // directory containing model configuration files
    optional_arg("OUTPUT", config_path("output")); // shared path of output files
    optional_arg("SAMPLES", ""); // path to a table with the sampling schedule
    optional_arg("SPATIAL", fileExists(config_path("maps.tsv"))); // is the model spatial?
    optional_arg("SAVE_LOCATIONS", F); // record locations of all individuals?
    optional_arg("BURNIN_LENGTH", 0); // length of the burnin period in generations
    optional_arg("SIMULATION_LENGTH", // total length of the simulation in generations
                 asInteger(readFile(config_path("length.txt"))));

    // how many attempts should be made to place an offspring on a map before
    // discarding it?
    optional_arg("MAX_ATTEMPTS", 1);

    // model configuration tables
    defineConstant("POPULATIONS", read_table(config_path("populations.tsv")));
    defineConstant("GENEFLOWS", read_table(config_path("geneflow.tsv")));
    defineConstant("RESIZES", read_table(config_path("resizes.tsv")));
    defineConstant("SAMPLING", read_table(SAMPLES));

    if (SPATIAL) {
        defineConstant("INTERACTIONS", read_table(config_path("dispersals.tsv")));
        defineConstant("MAPS", read_table(config_path("maps.tsv")));

        // load all spatial maps (image objects)
        MAPS.setValue("image", sapply(config_path(MAPS.getValue("path")), "Image(applyValue);"));

        // world map dimensions
        defineConstant("WIDTH", MAPS.getValue("image")[0].width);
        defineConstant("HEIGHT", MAPS.getValue("image")[0].height);

        initializeSLiMOptions(keepPedigrees = T, dimensionality = "xy");

        // generate interaction types (two for each population - competition and mating)
        for (i in POPULATIONS.getValue("pop_id")) {
            competition = filter(INTERACTIONS, "pop_id", i).getValue("competition_dist")[0];
            mating = filter(INTERACTIONS, "pop_id", i).getValue("mate_dist")[0];

            initializeInteractionType(2 * i, "xy", reciprocal = T, maxDistance = competition);
            initializeInteractionType(2 * i + 1, "xy", reciprocal = T, maxDistance = mating);
        }
    } else {
        initializeSLiMOptions(keepPedigrees = T);
        defineConstant("INTERACTIONS", NULL);
        defineConstant("MAPS", NULL);
    }

    defineConstant("SIMULATION_START", BURNIN_LENGTH + min(POPULATIONS.getValue("tsplit_gen")));
    defineConstant("SIMULATION_END", SIMULATION_START + SIMULATION_LENGTH);

    initializeTreeSeq(retainCoalescentOnly = T);

    initializeMutationType("m0", 0.5, "f", 0.0);
    initializeGenomicElementType("g1", m0, 1.0);
    initializeGenomicElement(g1, 0, SEQUENCE_LENGTH - 1);
    initializeMutationRate(0);

    initializeRecombinationRate(RECOMB_RATE);
}

1 early() /* Schedule script block events */ {
    // start of the burnin and of the simulation itself
    sim.rescheduleScriptBlock(s0, generations = SIMULATION_START);

    // population splits
    sim.rescheduleScriptBlock(s1, generations = unique(c(1, BURNIN_LENGTH + POPULATIONS.getValue("tsplit_gen"))));

    // geneflow events
    if (num_rows(GENEFLOWS)) {
        sim.rescheduleScriptBlock(s2, generations = BURNIN_LENGTH + unique(GENEFLOWS.getValue("tstart_gen")));
        sim.rescheduleScriptBlock(s3, generations = BURNIN_LENGTH + unique(GENEFLOWS.getValue("tend_gen")));
    } else {
        sim.deregisterScriptBlock(s2);
        sim.deregisterScriptBlock(s3);
    }

    // spatial map changes
    if (num_rows(MAPS))
         sim.rescheduleScriptBlock(s4, generations = unique(c(1, BURNIN_LENGTH + MAPS.getValue("tmap_gen"))));
    else
         sim.deregisterScriptBlock(s4);

    // step population size changes
    step_changes = filter(RESIZES, "how", "step");
    if (num_rows(step_changes))
        sim.rescheduleScriptBlock(s5, generations = BURNIN_LENGTH + unique(step_changes.getValue("tresize_gen")));
    else
        sim.deregisterScriptBlock(s5);

    // exponential population size changes
    exp_changes = filter(RESIZES, "how", "exponential");
    if (num_rows(exp_changes)) {
        // extract times of all scheduled exponential size changes
        times = c();
        for (i in seqLen(num_rows(exp_changes))) {
            event = exp_changes.getRowValues(i);
            times = c(times, event.getValue("tresize_gen") : event.getValue("tend_gen"));
        }
        sim.rescheduleScriptBlock(s6, generations = BURNIN_LENGTH + unique(times));
    } else
        sim.deregisterScriptBlock(s6);

    // set interaction distances and dispersals
    if (num_rows(INTERACTIONS))
        sim.rescheduleScriptBlock(s7, generations = unique(c(1, BURNIN_LENGTH + INTERACTIONS.getValue("tdispersal_gen"))));
    else
        sim.deregisterScriptBlock(s7);

    // output locations of individuals
    if (SAVE_LOCATIONS & SPATIAL) {
        sim.rescheduleScriptBlock(s8, start = SIMULATION_START, end = SIMULATION_END);
        write_locations_header();
    } else
        sim.deregisterScriptBlock(s8);

    // remember individuals for tree sequence recording
    sim.rescheduleScriptBlock(s10, start = SIMULATION_START, end = SIMULATION_END);

    // remove populations from the simulation
    cleanups = filter(POPULATIONS, "tremove_gen", -1, negate = T);
    if (num_rows(cleanups))
         sim.rescheduleScriptBlock(s11, generations = BURNIN_LENGTH + unique(cleanups.getValue("tremove_gen")));
    else
         sim.deregisterScriptBlock(s11);

    // save data and stop the simulation
    sim.rescheduleScriptBlock(s12, generations = SIMULATION_END);
}

///
/// Scheduled event script blocks
///

s0 late() /* Log the start of the simulation */ {
    if (sim.generation == 1 & BURNIN_LENGTH > 0)
        log_output("start of burnin");
    else
        log_output("starting the simulation");
}

s1 late() /* Population splits */ {
    pops = filter(POPULATIONS, "tsplit_gen", c(1, sim.generation - BURNIN_LENGTH));

    for (i in seqLen(num_rows(pops))) {
        pop = pops.getRowValues(i);
        // skip over ancestral populations, who have been created in generation 1
        if (sim.generation > 1 & pop.getValue("tsplit_gen") == 1) next;
        create_pop(pop);
    }

    sim.interactionTypes.evaluate();
}

s2 late() /* Geneflow events */ {
    events = filter(GENEFLOWS, "tstart_gen", sim.generation - BURNIN_LENGTH);
    for (i in seqLen(num_rows(events))) {
        event = events.getRowValues(i);
        set_geneflow(event, event.getValue("rate"));
    }
}

s3 late() /* Stopping geneflow */ {
    events = filter(GENEFLOWS, "tend_gen", sim.generation - BURNIN_LENGTH);
    for (i in seqLen(num_rows(events))) {
        event = events.getRowValues(i);
        set_geneflow(event, 0.0);
    }
}

s4 late() /* Update spatial population boundaries */ {
    maps = filter(MAPS, "tmap_gen", c(1, sim.generation - BURNIN_LENGTH));

    for (i in seqLen(num_rows(maps))) {
        map = maps.getRowValues(i);

        // skip over ancestral populations, whose maps have been set in generation 1
        if (sim.generation > 1 & map.getValue("tmap_gen") == 1) next;

        id = map.getValue("pop_id");

        log_output("updating map for " + map.getValue("pop") + "(p" + id + ")");

        img = map.getValue("image");
        pop = get_pop(map.getValue("pop"));

        // take care of an edge case in which the entire map is habitable
        // (i.e. minimum observed pixel value is equal to the maximum value)
        // -- in these cases, defineSpatialMap crashes complaining about invalid
        //    valueRange
        min_pixel = min(img.floatK);
        max_pixel = max(img.floatK);
        if (min_pixel == max_pixel) min_pixel = 0;

        pop.defineSpatialMap(
            "world", "xy", 1.0 - img.floatK,
            valueRange=c(min_pixel, max_pixel),
            colors=c("#000000", "#FFFFFF")
        );
        pop.setSpatialBounds(c(0.0, 0.0, asFloat(WIDTH) - 1, asFloat(HEIGHT) - 1));

        // uniformly distribute individuals if this is the very first boundary
        // of the population
        tsplit = filter(POPULATIONS, "pop_id", id).getValue("tsplit_gen");
        if (tsplit == sim.generation | tsplit == sim.generation - BURNIN_LENGTH)
            set_coordinates(get_pop(id).individuals, id);
    }
}

s5 /* Step population size changes */ {
    // get all step resize events active in this generation
    all_events = filter(RESIZES, "tresize_gen", sim.generation - BURNIN_LENGTH);
    events = filter(all_events, "how", "step");

    for (i in seqLen(num_rows(events))) {
        event = events.getRowValues(i);
        pop = event.getValue("pop"); pop_size = event.getValue("N");
        get_pop(pop).setSubpopulationSize(pop_size);
        log_output(pop + "(p" + event.getValue("pop_id") + ") resized to " +
                             pop_size + " individuals");
    }
}

s6 /* Exponential population size changes */ {
    if (!num_rows(RESIZES)) return;

    // get exponential resize events active in (i.e. overlapping) this generation
    active = (RESIZES.getValue("tresize_gen") <= sim.generation - BURNIN_LENGTH) &
             (RESIZES.getValue("tend_gen") >= sim.generation - BURNIN_LENGTH) &
             RESIZES.getValue("how") == "exponential";
    events = RESIZES.getRowValues(active);

    for (i in seqLen(num_rows(events))) {
        event = events.getRowValues(i);

        pop = event.getValue("pop"); id = event.getValue("pop_id");
        Nstart = event.getValue("prev_N"); Nend = event.getValue("N");
        tstart = BURNIN_LENGTH + event.getValue("tresize_gen");
        tend = BURNIN_LENGTH + event.getValue("tend_gen");

        // calculate current population size based on the growth parameters
        r = log(Nend / Nstart) / (tend - tstart);
        tdelta = sim.generation - tstart;
        Nt = asInteger(round(Nstart * exp(r * tdelta)));

        get_pop(id).setSubpopulationSize(Nt);

        if (Nstart < Nend)
            event_type = "growth";
        else
            event_type = "shrinking";

        current_size = get_pop(id).individualCount;
        if (sim.generation == tstart)
            log_output("start of exponential " + event_type + " of " + pop + "(p" + id +
                       ") from size " + current_size);
        if (sim.generation == tend)
            log_output("end of exponential " + event_type + " of " + pop + "(p" + id +
                       ") at size " + current_size);
    }
}

s7 late() /* Changing interaction distances and dispersals */ {
    events = filter(INTERACTIONS, "tdispersal_gen", c(1, sim.generation - BURNIN_LENGTH));

    for (i in seqLen(num_rows(events))) {
        event = events.getRowValues(i);

        // skip over ancestral populations, whose dispersal has been set in generation 1
        if (sim.generation > 1 & event.getValue("tdispersal_gen") == 1) next;

        pop = event.getValue("pop"); pop_id = event.getValue("pop_id");

        competition_dist = event.getValue("competition_dist");
        mate_dist = event.getValue("mate_dist");
        dispersal_dist = event.getValue("dispersal_dist");
        dispersal_fun = event.getValue("dispersal_fun");

        // interaction parameters are accessed in the same way they were created
        // in the initialize() block -- for an i-th population, we have the
        // 'competition' maxDistance at 2*i and mate choice maxDistance at 2*i + 1
        competition = sim.interactionTypes[2 * pop_id];
        mating = sim.interactionTypes[2 * pop_id + 1];
        dispersal = get_pop(pop).getValue("dispersal_dist");
        fun = get_pop(pop).getValue("dispersal_fun");

        // only change parameters that are scheduled for change in this event
        if (competition_dist != competition.maxDistance) {
            log_output("setting competition interaction distance for " + pop + "(p" +
                       pop_id + ") to " + competition_dist);
            competition.unevaluate();
            competition.maxDistance = competition_dist;
        }
        if (mate_dist != mating.maxDistance) {
            log_output("setting mate choice distance for " + pop + "(p" +
                                 pop_id + ") to " + mate_dist);
            mating.unevaluate();
            mating.maxDistance = mate_dist;
        }
        if (dispersal_dist != dispersal) {
            if (dispersal != -1)
                log_output("setting offspring dispersal distance for " + pop +
                           "(p" + pop_id + ") to " + dispersal_dist);
            get_pop(pop).setValue("dispersal_dist", dispersal_dist);
        }
        if (dispersal_fun != fun) {
            if (fun != "")
                log_output("changing dispersal kernel for " + pop +
                           "(p" + pop_id + ") to " + dispersal_fun);
            get_pop(pop).setValue("dispersal_fun", dispersal_fun);
        }
    }

    sim.interactionTypes.evaluate();
}

s8 late() /* Save locations of all individuals */ {
    filename = output_path("ind_locations.tsv.gz");
    for (ind in sim.subpopulations.individuals) {
        ind_str = paste(
            SIMULATION_END - sim.generation,
            ind.subpopulation.id,
            filter(POPULATIONS, "pop_id", ind.subpopulation.id).getValue("pop"),
            ind.pedigreeID,
            ind.spatialPosition,
            sep = "\t"
        );
        writeFile(filename, ind_str, append = T, compress = T);
    }
}

s10 late() /* Remember individuals for tree sequence recording */ {
    events = filter(SAMPLING, "time_gen", sim.generation - BURNIN_LENGTH);

    for (i in seqLen(num_rows(events))) {
        event = events.getRowValues(i);
        // which population and how many individuals to sample from it?
        pop = event.getValue("pop"); n = event.getValue("n");
        all_inds = get_pop(pop).individuals;

        // only individuals not yet sampled are eligible for remembering
        all_inds = all_inds[all_inds.tag != 1];

        x = event.getValue("x"); y = event.getValue("y");
        if (x != -1 & y != -1) {
            distances = sqrt((x - all_inds.x) ^ 2 + (y - all_inds.y) ^ 2);
            where = " around [" + x + ", " + y + "]";
        } else
            where = "";

        if (isInfinite(n)) {
            n = length(all_inds);
            n_str = "all (" + n + ")";
            // replace the original INF value with the actual number of individuals
            // for later serialization of metadata
            orig_n = SAMPLING.getValue("n"); orig_n[i] = n;
            SAMPLING.setValue("n", orig_n);
        } else
            n_str = asString(asInteger(n));

        log_output("remembering " + n_str + " individuals of " +
                             pop + "(p" + get_pop(pop).id + ")" + where);

        // give a warning in case more individuals are scheduled for sampling
        // than are present in the population
        if (n > length(all_inds)) {
            catn("(population has " + length(all_inds) + " but remembering of " + n +
                     " was requested - capping at " + length(all_inds) + ")");
            n = length(all_inds);
        }

        if (exists("distances"))
            inds = all_inds[order(distances)][0 : (n - 1)];
        else
            inds = sample(all_inds, asInteger(n));

        inds.tag = 1; // tag sampled individuals as remembered
        sim.treeSeqRememberIndividuals(inds, permanent = T);
    }
}

1: late() /* Retain all individuals in each generation */ {
    // note that permanent remembering takes priority in SLiM so this doesn't
    // override permanent remembering performed above
    sim.treeSeqRememberIndividuals(sim.subpopulations.individuals, permanent = F);
}

s11 late() /* Schedule removal of populations */ {
    pops = filter(POPULATIONS, "tremove_gen", sim.generation - BURNIN_LENGTH);
    for (i in seqLen(num_rows(pops))) {
        pop = pops.getRowValues(i);
        log_output("cleanup of " + pop.getValue("pop") +
                             "(p" + pop.getValue("pop_id") + ")");
        get_pop(pop.getValue("pop")).setSubpopulationSize(0);
    }
}

s12 late() /* End of simulation */ {
    log_output("saving the tree sequence output");
    filename = output_path("ts.trees");

    // add slendr-specific metadata to its own Dictionary key
    metadata = collect_metadata();

    sim.treeSeqOutput(filename, metadata = Dictionary("slendr", metadata));

    log_output("simulation finished");
    sim.simulationFinished();
}

///
/// Interaction and fitness callbacks
///

1: late() /* Evaluate spatial interactions */ {
    sim.interactionTypes.evaluate();
}

2: fitness(NULL) /* Compute fitness of individuals */ {
    if (!SPATIAL) return 1.0;
    interaction = sim.interactionTypes[2 * subpop.id];
    totalStrength = interaction.totalOfNeighborStrengths(individual);
    return 1.1 - totalStrength / subpop.individualCount;
}

2: mateChoice() /* Compute mating interaction */ {
    if (!SPATIAL) return NULL;
    return sim.interactionTypes[2 * subpop.id + 1].strength(individual);
}

modifyChild() /* Place offspring within its population's boundary */ {
    // set flag marking availability for sampling
    child.tag = 0;

    if (!SPATIAL) return T;

    // in case of spatially non-overlapping geneflow, assign locations uniformly
    if (child.migrant) {
        // get indices of the currently active geneflow events
        active = (GENEFLOWS.getValue("tstart_gen") <= sim.generation - BURNIN_LENGTH) &
                 (sim.generation - BURNIN_LENGTH <= GENEFLOWS.getValue("tend_gen"));

        // get population of the offspring's parents
        source = sourceSubpop.id == GENEFLOWS.getValue("from_id");

        // get the offspring's new population
        target = subpop.id == GENEFLOWS.getValue("to_id");

        // if the current admixture event is non-overlapping, set the
        // childs coordinates freely
        overlap = GENEFLOWS.getValue("overlap")[active & target & source];

        if (!overlap) {
            set_coordinates(child, subpop.id, log = F);
            return T;
        }
    }

    // make sure that offspring is generated in allowed locations on the map
    // (within it's population bounds and not in an inaccessible location)
    attempts = 0; // how many attempts have been made to place the offspring?
    do {
        attempts = attempts + 1;

        dispersal_param = get_pop(subpop.id).getValue("dispersal_dist");
        dispersal_fun = get_pop(subpop.id).getValue("dispersal_fun");

        movement = dispersal_fun(dispersal_fun, dispersal_param);
        pos = parent1.spatialPosition + movement;

        found = subpop.pointInBounds(pos) & subpop.spatialMapValue("world", pos) == 0.0;
    } while (!found & attempts < MAX_ATTEMPTS);

    if (found) {
        child.setSpatialPosition(pos);
        return T;
    }

    return F;
}

///
/// Utility functions
///

// Set a default value of a command-line argument.
function (void) optional_arg(s arg, lifs default) {
    if (!exists(arg)) defineConstant(arg, default);
}

// Check if a required command-line argument was specified.
function (void) required_arg(s arg) {
    if (!exists(arg)) stop("Required argument '" + arg + "' is missing\n");
}

function (void) create_pop(object<Dictionary> pop) {
    pop_id = pop.getValue("pop_id");

    if (pop.getValue("parent") ==  "ancestor") {
        log_output("creating " + pop.getValue("pop") + "(p" + pop.getValue("pop_id") + ")");
        sim.addSubpop(pop_id, pop.getValue("N"));
    } else {
        log_output(
            "split of " + pop.getValue("pop") + "(p" + pop.getValue("pop_id") + ")" +
            " from " + pop.getValue("parent") + "(p" + pop.getValue("parent_id")  + ")"
        );
        sim.addSubpopSplit(pop_id, pop.getValue("N"), pop.getValue("parent_id"));
    }

    // dispersal distance is set in a script block (here we just create the variable)
    get_pop(pop_id).setValue("dispersal_dist", -1);
    get_pop(pop_id).setValue("dispersal_fun", "");
}

// Start or stop geneflow
function (void) set_geneflow(object<Dictionary> event, f$ rate) {
    from = event.getValue("from"); to = event.getValue("to");
    from_id = event.getValue("from_id"); to_id = event.getValue("to_id");

    if (rate > 0) {
        span = event.getValue("tend_gen") - event.getValue("tstart_gen");
        rate = rate / span;
        log_output("geneflow " + from + "(p" + from_id + ")" +
                             " -> " + to + "(p" + to_id + ")" +
                             " (" + rate + "% over " + span + " generations)");
    } else
        log_output("geneflow " + from + "(p" + from_id + ")" +
                             " -> " + to + "(p" + to_id + ")" + " set to 0%");

    get_pop(to_id).setMigrationRates(from_id, rate);
}

// Distribute individuals uniformly within the boundary of the given population
function (void) set_coordinates(lifso<Individual> inds, i$ id, [l$ log = T]) {
    if (log) log_output("distributing individuals of " +
                        filter(POPULATIONS, "pop_id", id).getValue("pop") +
                        "(p" + id + ")");
    for (ind in inds) {
        do pos = c(runif(1, 0, WIDTH), runif(1, 0, HEIGHT));
        while (get_pop(id).spatialMapValue("world", pos) == 1.0);
        ind.setSpatialPosition(pos);
    }
}

// Compute the dispersal of an offspring from its parent
function (f) dispersal_fun(s$ fun, f$ param) {
    // first draw the distance from a given distribution
    if (fun == "normal")
        distance = rnorm(1, mean = 0, sd = param);
    else if (fun == "uniform")
        distance = runif(1, min = 0, max = param);
    else if (fun == "cauchy")
        distance = rcauchy(1, location = 0, scale = param);
    else if (fun == "exponential")
        distance = rexp(1, mu = param);
    else
        stop("Invalid dispersal function '" + fun + "' specified");

    // draw an angle from a uniform distribution of angles around a circle
    angle = runif(1, min = 0, max = 2 * PI);

    // convert the polar coordinate <angle, distance> into cartesian system
    x = distance * cos(angle);
    y = distance * sin(angle);

    return(c(x, y));
}

// Get subpopulation object based on a given identifier
// (SLiM-based numerber or a user-defined string name)
function (lifso<Subpopulation>$) get_pop(si$ i) {
    if (isString(i)) i = filter(POPULATIONS, "pop", i).getValue("pop_id");
    if (!any(i == sim.subpopulations.id))
        stop("Population " + filter(POPULATIONS, "pop_id", i).getValue("pop") +
                 " not present in the simulation in generation " + sim.generation);
    return sim.subpopulations[i == sim.subpopulations.id];
}

function (object<Dictionary>) collect_metadata(void) {
    metadata = Dictionary();

    // slendr version and commit hash that generated this script
    metadata.setValue("version", "__VERSION__");
    metadata.setValue("backend", "SLiM");
    // model description
    metadata.setValue("description", "__DESCRIPTION__");
    // sampling schedule table
    metadata.setValue("sampling", SAMPLING);

    if (SPATIAL) {
        spatial_metadata = Dictionary();
        // EPSG code of the CRS used
        spatial_metadata.setValue("crs", __CRS__);
        // coordinates of the bounding box of the map
        spatial_metadata.setValue("extent", __EXTENT__);
        // how many pixels per unit of distance (i.e. meters for projected CRS)
        spatial_metadata.setValue("resolution", __RESOLUTION__);
    } else
        spatial_metadata = NULL;

    metadata.setValue("map", spatial_metadata);

    metadata.setValue("arguments", Dictionary(
        "SEQUENCE_LENGTH", SEQUENCE_LENGTH,
        "RECOMB_RATE", RECOMB_RATE,
        "SEED", SEED,
        "BURNIN_LENGTH", BURNIN_LENGTH,
        "SIMULATION_LENGTH", SIMULATION_LENGTH,
        "MAX_ATTEMPTS", MAX_ATTEMPTS
    ));

    return(metadata);
}

///
/// Input/output functions
///

// Compose a path to a configuration file
function (s) config_path(s file) {
    return MODEL + "/" + file;
}

// Compose a path to an output file
function (s$) output_path(s$ file) {
    return paste0(OUTPUT, "_", file);
}

// Write the locations table header
function (void) write_locations_header(void) {
    filename = output_path("ind_locations.tsv.gz");
    header_str = "gen\tpop_id\tpop\tind\tx\ty";
    writeFile(filename, header_str, compress = T);
}

// Write the given log output message with the time stamp
function (void) log_output(s$ str) {
    catn("Generation " + sim.generation + ": " + str);
}

///
/// Data frame functions
///

// Read a TSV file as a Dictionary of pairs of the form
// "column name" : <vector of column values>
function (object<Dictionary>) read_table(s$ path) {
    if (!fileExists(path)) return(NULL);

    lines = readFile(path);

    // extract column names
    columns = strsplit(lines[0], "\t");
    // parse the body of the table into individual elements
    body = lines[1 : (length(lines) - 1)];
    body_elements = sapply(body, "strsplit(applyValue, '\t');");

    // generate a dictionary of key-vector (pairs column-column values)
    dict = Dictionary();
    for (i in seqAlong(columns)) {
        // extract values of the i-th column by offseting into a one dimensional
        // vector of dataframe cells
        indices = seq(i, length(body_elements) - 1, by = length(columns));
        column_values = convert_type(columns[i], body_elements[indices]);

        dict.setValue(columns[i], column_values);
    }

    return dict;
}

// Filter the data frame `d` to rows where the `col` is equal to `val`
// (or not equal if `negate` is TRUE)
function (object<Dictionary>) filter(No<Dictionary> d, s$ col, ifsl val, [l$ negate = F]) {
    if (isNULL(d) | num_rows(d) == 0) return(NULL);

    if (!any(col == d.allKeys))
        stop("Column '" + col + "' not present in the table");

    values = d.getValue(col);

    matches = sapply(values, "any(applyValue == val);");
    if (negate) matches = !matches;

    return d.getRowValues(matches);
}

// Get the number of rows of the given dataframe
function (i$) num_rows(No<Dictionary>$ d) {
    if (isNULL(d)) return(0);

    columns = d.allKeys;
    lengths = sapply(columns, 'length(d.getValue(applyValue));');
    if (length(unique(lengths)) != 1)
        stop("Corrupted dataframe {" + paste(d.allKeys, sep = ", ") +
                 "} with columns of unequal length (" +
                 paste(lengths, sep = ", ") + ")");
    else
        return(unique(lengths));
}

// Pretty printer for Dictionary-based dataframe objects
function (void) print_table(object<Dictionary> d) {
    for (i in seqLen(num_rows(d))) {
        row = d.getRowValues(i);
        cat("row #" + i + "\n-------\n| ");
        for (c in d.allKeys) {
            val = row.getValue(c);
            if (!isFloat(val) & !isInteger(val) & !isString(val) & !isLogical(val))
                next;
            cat(c + ": " + val + " | ");
        }
        cat("\n\n");
    }
}

// Convert column vector values to a required type (this is hardcoded
// for every column among all slendr-generated TSV files)
function (ifsl) convert_type(s$ column_name, s string_values) {
    // vectors of all possible column names in tables defined by slendr `compile()`
    string = c("pop", "parent", "how", "path", "from", "to", "how", "dispersal_fun");
    integer = c("pop_id", "parent_id", "from_id", "to_id", "N", "prev_N",
                "time_orig", "time_gen", "tmap_orig", "tmap_gen",
                "tsplit_orig", "tsplit_gen", "tdispersal_orig", "tdispersal_gen",
                "tremove_orig", "tremove_gen", "tstart_orig", "tstart_gen",
                "tend_orig", "tend_gen", "tresize_orig", "tresize_gen");
    float = c("rate", "competition_dist", "mate_dist", "dispersal_dist", "n",
              "x", "y", "x_orig", "y_orig");
    logical = c("overlap");

    if (any(column_name == integer))
        values = asInteger(string_values);
    else if (any(column_name == float))
        values = asFloat(string_values);
    else if (any(column_name == logical))
        values = asLogical(string_values);
    else if (any(column_name == string))
        values = asString(string_values);
    else
        stop("Unknown column '" + column_name + "' in a dataframe");

    return values;
}
